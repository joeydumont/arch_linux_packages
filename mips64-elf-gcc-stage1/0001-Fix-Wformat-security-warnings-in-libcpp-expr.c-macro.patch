From 088019ce3dcf28d11c09cecadde91beef236613f Mon Sep 17 00:00:00 2001
From: Joey Dumont <joey.dumont@gmail.com>
Date: Mon, 3 May 2021 07:27:38 -0400
Subject: [PATCH] Fix format-security warnings.

Compiling gcc with -Wformat-security turns up some errors. To fix them, we need to specify the
format string rather than directly passing a variable to printf or, in this case, to functions that
eventually call printf.
---
 gcc/diagnostic.c | 2 +-
 libcpp/expr.c    | 6 +++---
 libcpp/macro.c   | 8 ++++----
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/gcc/diagnostic.c b/gcc/diagnostic.c
index 246d75256..4eabf2690 100644
--- a/gcc/diagnostic.c
+++ b/gcc/diagnostic.c
@@ -1884,7 +1884,7 @@ fancy_abort (const char *file, int line, const char *function)
   if (global_dc->printer == NULL)
     {
       /* Print the error message.  */
-      fnotice (stderr, diagnostic_kind_text[DK_ICE]);
+      fnotice (stderr, "%s", diagnostic_kind_text[DK_ICE]);
       fnotice (stderr, "in %s, at %s:%d", function, trim_filename (file), line);
       fputc ('\n', stderr);
 
diff --git a/libcpp/expr.c b/libcpp/expr.c
index dd5611dce..319b225de 100644
--- a/libcpp/expr.c
+++ b/libcpp/expr.c
@@ -809,10 +809,10 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,
 
 	  if (CPP_OPTION (pfile, c99))
             cpp_warning_with_line (pfile, CPP_W_LONG_LONG, virtual_location,
-				   0, message);
+				   0, "%", message);
           else
             cpp_pedwarning_with_line (pfile, CPP_W_LONG_LONG,
-				      virtual_location, 0, message);
+				      virtual_location, 0, "%s", message);
         }
 
       if ((result & CPP_N_SIZE_T) == CPP_N_SIZE_T
@@ -822,7 +822,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,
 				? N_("use of C++23 %<size_t%> integer constant")
 				: N_("use of C++23 %<make_signed_t<size_t>%> integer constant");
 	  cpp_warning_with_line (pfile, CPP_W_SIZE_T_LITERALS,
-				 virtual_location, 0, message);
+				 virtual_location, 0, "%s", message);
        }
 
       result |= CPP_N_INTEGER;
diff --git a/libcpp/macro.c b/libcpp/macro.c
index dff7c98a4..5c7a472dd 100644
--- a/libcpp/macro.c
+++ b/libcpp/macro.c
@@ -181,7 +181,7 @@ class vaopt_state {
 	if (m_state == 2 && token->type == CPP_PASTE)
 	  {
 	    cpp_error_at (m_pfile, CPP_DL_ERROR, token->src_loc,
-			  vaopt_paste_error);
+			  "%s", vaopt_paste_error);
 	    return ERROR;
 	  }
 	/* Advance states before further considering this token, in
@@ -210,7 +210,7 @@ class vaopt_state {
 		if (was_paste)
 		  {
 		    cpp_error_at (m_pfile, CPP_DL_ERROR, token->src_loc,
-				  vaopt_paste_error);
+				  "%s", vaopt_paste_error);
 		    return ERROR;
 		  }
 
@@ -3602,7 +3602,7 @@ create_iso_definition (cpp_reader *pfile)
 	     function-like macros, but not at the end.  */
 	  if (following_paste_op)
 	    {
-	      cpp_error (pfile, CPP_DL_ERROR, paste_op_error_msg);
+	      cpp_error (pfile, CPP_DL_ERROR, "%s", paste_op_error_msg);
 	      goto out;
 	    }
 	  if (!vaopt_tracker.completed ())
@@ -3617,7 +3617,7 @@ create_iso_definition (cpp_reader *pfile)
 	     function-like macros, but not at the beginning.  */
 	  if (macro->count == 1)
 	    {
-	      cpp_error (pfile, CPP_DL_ERROR, paste_op_error_msg);
+	      cpp_error (pfile, CPP_DL_ERROR, "%s", paste_op_error_msg);
 	      goto out;
 	    }
 
-- 
2.31.1

